*&---------------------------------------------------------------------*
*&  Include           ZEDR22_35_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  SET_FIELD_CATEGORY
*&---------------------------------------------------------------------*
FORM set_field_category .
  REFRESH: gt_field, gt_fieldcat.

  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      i_program_name     = g_program
      i_internal_tabname = 'GT_DISPLAY'
      i_inclname         = g_program
    CHANGING
      ct_fieldcat        = gt_field[].

  1_pos = 1_pos + 1.          "<--DISPLAY시 해당필드위치지정
  CLEAR gs_fieldcat_ln.         "<--기존FIELDCAT_LN의 HEADER에 입력되어
  gs_fieldcat_ln-col_pos      = 1_pos.       "있을 수 있는 데이터를 삭제
  gs_fieldcat_ln-fieldname    = 'ICON'."반드시 대문자 입력
  gs_fieldcat_ln-key = ' '.
  gs_fieldcat_ln-fix_column   ='X'. "열 고정
  gs_fieldcat_ln-reptext_ddic = '아이콘'.
  APPEND gs_fieldcat_ln TO gt_fieldcat.

  1_pos = 1_pos + 1.          "<--DISPLAY시 해당필드위치지정
  CLEAR gs_fieldcat_ln.         "<--기존FIELDCAT_LN의 HEADER에 입력되어
  gs_fieldcat_ln-col_pos      = 1_pos.       "있을 수 있는 데이터를 삭제
  gs_fieldcat_ln-fieldname    = 'WERKS'."반드시 대문자 입력
  gs_fieldcat_ln-key = ' '.
  gs_fieldcat_ln-fix_column   ='X'. "열 고정
  gs_fieldcat_ln-reptext_ddic = '플랜트'.
  APPEND gs_fieldcat_ln TO gt_fieldcat.

  1_pos = 1_pos + 1.          "<--DISPLAY시 해당필드위치지정
  CLEAR gs_fieldcat_ln.         "<--기존FIELDCAT_LN의 HEADER에 입력되어
  gs_fieldcat_ln-col_pos      = 1_pos.       "있을 수 있는 데이터를 삭제
  gs_fieldcat_ln-fieldname    = 'MATNR'."반드시 대문자 입력
  gs_fieldcat_ln-key = ' '.
  gs_fieldcat_ln-no_zero = 'X'.
  gs_fieldcat_ln-fix_column   ='X'. "열 고정
  gs_fieldcat_ln-reptext_ddic = '자재'.
  APPEND gs_fieldcat_ln TO gt_fieldcat.

  1_pos = 1_pos + 1.
  CLEAR gs_fieldcat_ln.
  gs_fieldcat_ln-col_pos      = 1_pos.
  gs_fieldcat_ln-fieldname    = 'TEMP1'.
  gs_fieldcat_ln-key = ' '.
  gs_fieldcat_ln-fix_column   ='X'.
  gs_fieldcat_ln-reptext_ddic = '자재명'.
  APPEND gs_fieldcat_ln TO gt_fieldcat.

  1_pos = 1_pos + 1.
  CLEAR gs_fieldcat_ln.
  gs_fieldcat_ln-col_pos      = 1_pos.
  gs_fieldcat_ln-fieldname    = 'STLAL'.
  gs_fieldcat_ln-key = ' '.
  gs_fieldcat_ln-fix_column   ='X'.
  gs_fieldcat_ln-reptext_ddic = '대처번호'.
  APPEND gs_fieldcat_ln TO gt_fieldcat.

  1_pos = 1_pos + 1.
  CLEAR gs_fieldcat_ln.
  gs_fieldcat_ln-col_pos      = 1_pos.
  gs_fieldcat_ln-fieldname    = 'TEXT'.
  gs_fieldcat_ln-key = ' '.
  gs_fieldcat_ln-fix_column   ='X'.
  gs_fieldcat_ln-reptext_ddic = '에러 사유'.
  APPEND gs_fieldcat_ln TO gt_fieldcat.

ENDFORM. " SET_FIELD_CATEGORY
*&---------------------------------------------------------------------*
*&      Form  CHANGE_DISPLAY_ATTRIBUTE
*&---------------------------------------------------------------------*
FORM change_display_attribute .
  DATA: lv_tabix TYPE i.

*****  CLEAR : gs_result.
*****  LOOP AT gt_result INTO gs_result.
*****    lv_tabix = sy-tabix.
*****    CLEAR: gt_coltab[].
*****    PERFORM initial_color  CHANGING gt_coltab.
*****
*****    CLEAR: gs_result-colinfo[].
*****    INSERT lines of gt_coltab  INTO TABLE gs_result-colinfo.
*****
*****    MODIFY gt_result FROM gs_result INDEX lv_tabix.
*****  ENDLOOP.

ENDFORM. " CHANGE_DISPLAY_ATTRIBUTE
*&---------------------------------------------------------------------*
*&      Form  INITIAL_COLOR
*&---------------------------------------------------------------------*
FORM initial_color CHANGING pt_coltab TYPE lvc_t_scol.
  DATA: ls_fieldcat TYPE slis_fieldcat_alv, "lvc_s_fcat,
        ls_color    TYPE lvc_s_scol.

*****  LOOP AT slis_fieldcat INTO ls_fieldcat.
*****    CLEAR ls_color.
*****    ls_color-fname = ls_fieldcat-fieldname.
*****
*****    CASE ls_color-fname.
*****      WHEN 'TEXT'.
*****        ls_color-color-col = 3.
*****        ls_color-color-int = 0.
*****        INSERT ls_color INTO TABLE pt_coltab.
*****      WHEN 'MATNR'.
*****        ls_color-color-col = 4.
*****        ls_color-color-int = 1.
*****        INSERT ls_color INTO TABLE pt_coltab.
*****      WHEN OTHERS.
*****    ENDCASE.
*****  ENDLOOP.

ENDFORM. " INITIAL_COLOR
*&---------------------------------------------------------------------*
*&      Form  SET_EVENTS
*&---------------------------------------------------------------------*
FORM set_events USING p_events TYPE slis_t_event.
  DATA ls_event TYPE slis_alv_event.
*****
*****  CALL FUNCTION 'REUSE_ALV_EVENTS_GET'
*****    EXPORTING
*****      i_list_type = 0
*****    IMPORTING
*****      et_events   = p_events.
*****
*****  READ TABLE p_events WITH KEY name =  slis_ev_top_of_page
*****                      INTO ls_event.
*****  IF sy-subrc = 0.
*****    MOVE   'TOP_OF_PAGE' TO ls_event-form.
*****    APPEND ls_event TO p_events.
*****  ENDIF.

ENDFORM. " SET_EVENTSs

*&---------------------------------------------------------------------*
*&      Form  PF_STATUS
*&---------------------------------------------------------------------*
FORM pf_status_set USING rt_extab TYPE slis_t_extab.

  SET PF-STATUS 'STANDARD'  EXCLUDING rt_extab.

ENDFORM. " PF_STATUS_SET
*&---------------------------------------------------------------------*
*&      Form  BDC_DYNPRO_PROCESSING
*&---------------------------------------------------------------------*
FORM bdc_dynpro_processing USING p_begin p_name p_no.
  IF p_begin = 'X'.
    CLEAR g_fbdcdata.
    MOVE  p_name  TO g_fbdcdata-program.
    MOVE  p_no    TO g_fbdcdata-dynpro.
    MOVE  'X'     TO g_fbdcdata-dynbegin.
    APPEND g_fbdcdata.
  ELSE.
    CLEAR g_fbdcdata.
    MOVE  p_name  TO g_fbdcdata-fnam.
    MOVE  p_no    TO g_fbdcdata-fval.
    APPEND g_fbdcdata.
  ENDIF.

ENDFORM. " BDC_DYNPRO_PROCESSING
*&---------------------------------------------------------------------*
*&      Form  GET_FILE_PATH
*&---------------------------------------------------------------------*
FORM get_file_path CHANGING VALUE(p_file).

  DATA: ld_def_path     TYPE string,
        ld_rc           TYPE i VALUE 1,
        ld_mask         TYPE string VALUE 'Excel-Sheet (*.xls)|*.xls|',
        ld_window_title TYPE string,
        lt_files        TYPE filetable,
        l_fname         TYPE string.

* returns default path for up- and download
  CALL METHOD cl_gui_frontend_services=>directory_get_current
    CHANGING
      current_directory = ld_def_path.

* calls selection-popup -> returns upload-path + filename
  CALL METHOD cl_gui_frontend_services=>file_open_dialog
    EXPORTING
*     WINDOW_TITLE      = LD_WINDOW_TITLE
*     DEFAULT_FILENAME  = L_FNAME
      file_filter       = ld_mask
      initial_directory = ld_def_path
    CHANGING
      file_table        = lt_files
      rc                = ld_rc.

  READ TABLE lt_files INTO p_file INDEX 1.

ENDFORM. " GET_FILE_PATH
*&---------------------------------------------------------------------*
*&      Form  EXCEL_UPLOAD_INIT
*&---------------------------------------------------------------------*
FORM excel_upload_init .

  TYPES truxs_t_text_data(4096) TYPE c OCCURS 0.
  DATA: i_truxs TYPE truxs_t_text_data.
  DATA: l_filename LIKE rlgrap-filename.

  l_filename = pa_fpath.
  CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'
    EXPORTING
      i_line_header        = 'X'   "Title이 있을경우 Header line을삭제
      i_tab_raw_data       = i_truxs
      i_filename           = l_filename
    TABLES
      i_tab_converted_data = gt_excel
    EXCEPTIONS
      conversion_failed    = 1
      OTHERS               = 2.

  IF sy-subrc = 1.
    MESSAGE s000 WITH 'File open error !' DISPLAY LIKE 'E'.
    g_err = 'X'.
    EXIT.
  ELSEIF sy-subrc = 2.
    MESSAGE s000 WITH 'File read error !' DISPLAY LIKE 'E'.
    g_err = 'X'.
    EXIT.
  ENDIF.

ENDFORM. " EXCEL_UPLOAD_INIT
*&---------------------------------------------------------------------*
*&      Form  EXCEL_DATA_CHECK
*&---------------------------------------------------------------------*
FORM excel_data_check .

  CHECK g_err NE 'X'.
  IF gt_excel[] IS INITIAL.
    MESSAGE i000 WITH 'Excel Data empty'.
    g_err = 'X'.
  ENDIF.

ENDFORM. " EXCEL_DATA_CHECK
*&---------------------------------------------------------------------*
*&      Form  EXCEL_DATA_INIT
*&---------------------------------------------------------------------*
FORM excel_data_init .

  CHECK g_err NE 'X'.
  PERFORM gather_checking_data.  "EXCEL에 필요한 값 변경
  PERFORM data_prepare.
  PERFORM data_process.          "MASTER DATA 올라가는것을 넣는다

  PERFORM display_data.

ENDFORM. " EXCEL_DATA_INIT
*&---------------------------------------------------------------------*
*&      Form  GATHER_CHECKING_DATA
*&---------------------------------------------------------------------*
FORM gather_checking_data .

  LOOP AT gt_excel INTO gs_excel.

    CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
      EXPORTING
        input  = gs_excel-matnr
      IMPORTING
        output = gs_excel-matnr.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = gs_excel-posnr
      IMPORTING
        output = gs_excel-posnr.

    MODIFY gt_excel FROM gs_excel TRANSPORTING matnr posnr.

  ENDLOOP.

  SORT gt_excel.
  DELETE ADJACENT DUPLICATES FROM gt_excel.

ENDFORM. " GATHER_CHECKING_DATA
*&---------------------------------------------------------------------*
*&      Form  DATA_PREPARE
*&---------------------------------------------------------------------*
FORM data_prepare .

  DATA : ls_result LIKE gs_result,
         ls_chk    LIKE gs_result,
         lt_result LIKE gs_result OCCURS 0.
  DATA : lv_tabix  TYPE sy-tabix,
         lv_row(5) TYPE n.

  DATA lv_flag.

  CLEAR : ls_result, lt_result[].
  CLEAR : lv_tabix, lv_row.

  g_pcnt = g_scnt = g_ecnt = g_tcnt = g_cnt = 0.

  CLEAR : gs_excel, gs_result, ls_result.

  g_cnt = g_scnt.

ENDFORM. " DATA_PREPARE
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_DATA
*&---------------------------------------------------------------------*
FORM display_data .

*& Set Layout
  CLEAR gs_layout.
  gs_layout-zebra             = ''.
  gs_layout-box_fieldname     = 'MARK'.
  gs_layout-colwidth_optimize = 'X'.
  gs_layout-coltab_fieldname  = 'COLINFO'.
  gs_layout-no_totalline        = 'X'.
*  slis_layout-totals_before_items = 'X'.
*****
* FORM문 발췌함수
  CALL FUNCTION 'REUSE_ALV_EVENTS_GET'
    EXPORTING
      i_list_type = 0
    IMPORTING
      et_events   = gt_events.

* FORM문   생성
  PERFORM  form_setting USING:
              slis_ev_top_of_page    c_top_of_page,
              slis_ev_user_command   c_user_command.
* PROGRAM  ID
  g_program = sy-repid.

  PERFORM header_setting USING:
          'H'   ' '               ' ',
          'S'   'TOTAL : '        g_tcnt,
          'S'   'SUCCESS : '      g_scnt,
          'S'   'ERROR   : '      g_ecnt.

*& Set Field Category
  PERFORM set_field_category.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program      = g_program
      is_layout               = gs_layout
      i_callback_user_command = 'USER_COMMAND'
*     I_CALLBACK_PF_STATUS_SET = C_STATUS_SET
      i_save                  = 'A'
      is_variant              = gs_variant
      it_events               = gt_events[]
      it_fieldcat             = gt_fieldcat[]
      it_sort                 = gt_sort[]
    IMPORTING
      e_exit_caused_by_caller = g_exit_caused_by_caller
      es_exit_caused_by_user  = gs_exit_caused_by_user
    TABLES
      t_outtab                = gt_result[].

ENDFORM. " DISPLAY_DATA
*&---------------------------------------------------------------------*
*&      Form  DATA_PROCESS
*&---------------------------------------------------------------------*
FORM data_process .
  CLEAR : g_matnr, g_stlal, g_exist, g_werks, gt_result, gt_result[].
  SORT gt_excel BY matnr stlal posnr.
  LOOP AT gt_excel INTO gs_excel.
    CLEAR g_exist.
    IF gs_excel-matnr <> g_matnr." or g_check = 'X'.
    ENDIF.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = gs_excel-stlal
      IMPORTING
        output = gs_excel-stlal.

    IF gs_excel-matnr <> g_matnr OR gs_excel-stlal <> g_stlal.
*     모자재 올리는곳
      IF sy-tabix <> 1.
        PERFORM bdc_dynpro_processing USING:
        'X' 'SAPLCSDI'             '0140',
        ' ' 'BDC_OKCODE'           '=FCBU'.

        CALL TRANSACTION 'CS01' USING    g_fbdcdata
                                MODE     pa_mode
                                UPDATE   p_update
                                MESSAGES INTO gt_msg.
        PERFORM transaction_result.
        CLEAR : g_fbdcdata, g_fbdcdata[], gt_msg, gt_msg[].
      ENDIF.
      PERFORM cs01_transaction.
    ELSE.
*     자자재 올리는곳
      PERFORM cs02_transaction.
    ENDIF.

    g_matnr = gs_excel-matnr.
    g_stlal = gs_excel-stlal.
*    g_STLAL = gs_excel-stlal.
    g_werks = gs_excel-werks.
    g_maktx = gs_excel-temp1.
    AT LAST.
      PERFORM bdc_dynpro_processing USING:
      'X' 'SAPLCSDI'             '0140',
      ' ' 'BDC_OKCODE'           '=FCBU'.

      CALL TRANSACTION 'CS01' USING    g_fbdcdata
                              MODE     pa_mode
                              UPDATE   p_update
                              MESSAGES INTO gt_msg.
      PERFORM transaction_result.
      CLEAR : g_fbdcdata, g_fbdcdata[], gt_msg, gt_msg[].

    ENDAT.

  ENDLOOP.

ENDFORM. " DATA_PROCESS
*&---------------------------------------------------------------------*
*&      Form  CHECK_STLAL
*&---------------------------------------------------------------------*
FORM check_stlal .
  DATA : l_stlal TYPE rc29n-stlal.
  CLEAR: l_stlal .

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = gs_excel-stlal
    IMPORTING
      output = gs_excel-stlal.

  SELECT SINGLE stlal INTO l_stlal
     FROM mast
    WHERE matnr = gs_excel-matnr
      AND werks = gs_excel-werks
      AND stlan = gs_excel-stlan
      AND stlal = gs_excel-stlal.

  IF sy-subrc = 0.
    g_exist = 'X'.
  ENDIF.
  g_check = 'Y'.

ENDFORM. " CHECK_STLAL
*&---------------------------------------------------------------------*
*&      Form  CS01_TRANSACTION
*&---------------------------------------------------------------------*
FORM cs01_transaction.

  PERFORM bdc_dynpro_processing USING:
  'X' 'SAPLCSDI'             '0100',
  ' ' 'BDC_OKCODE'           '=ENT1',
  ' ' 'RC29N-MATNR'          gs_excel-matnr,
  ' ' 'RC29N-WERKS'          gs_excel-werks,
  ' ' 'RC29N-STLAN'          gs_excel-stlan,
  ' ' 'RC29N-STLAL'          gs_excel-stlal,
  ' ' 'RC29N-DATUV'          gs_excel-bodat,  "SY-DATUM   ,

  'X' 'SAPLCSDI'             '0110',
  ' ' 'BDC_OKCODE'           '/00',
*    ' ' 'RC29K-BMENG'          GS_EXCEL-BMENG,
*    ' ' 'RC29K-STLST'          '1'         ,

  'X' 'SAPLCSDI'             '0111',
  ' ' 'BDC_OKCODE'           '/00'.

  PERFORM bdc_dynpro_processing USING:
  'X' 'SAPLCSDI'             '0140',
  ' ' 'BDC_OKCODE'           '=/CS  ',
  ' ' 'RC29P-IDNRK(01)'      gs_excel-idnrk,
  ' ' 'RC29P-MENGE(01)'      gs_excel-menge,
  ' ' 'RC29P-POSTP(01)'      gs_excel-postp,

  'X' 'SAPLCSDI'             '0130',
  ' ' 'BDC_OKCODE'           '/00' ,
  ' ' 'RC29P-POSNR'          gs_excel-posnr,
  ' ' 'RC29P-IDNRK'          gs_excel-idnrk,
*  ' ' 'RC29P-ALPGR'          GS_EXCEL-ALPGR,
  ' ' 'RC29P-MENGE'          gs_excel-menge,
  ' ' 'RC29P-MEINS'          gs_excel-meins.
*  ' ' 'RC29P-RFPNT'          GS_EXCEL-RFPNT,
*  ' ' 'RC29P-AUSCH'          GS_EXCEL-AUSCH.
*  ' ' 'RC29P-ITSOB'          GS_EXCEL-ITSOB.

  PERFORM bdc_dynpro_processing USING:
  'X' 'SAPLCSDI'             '0131',
  ' ' 'BDC_OKCODE'           '/00',
  ' ' 'RC29P-POTX1'          gs_excel-potx1,
  ' ' 'RC29P-POTX2'          gs_excel-potx2,

  ' ' 'RC29P-SANKA'          gs_excel-sanka,
  ' ' 'RC29P-BEIKZ'          gs_excel-beikz.

  IF gs_excel-itsob = '50' OR gs_excel-postp = 'N'.
    PERFORM bdc_dynpro_processing USING:
    'X' 'SAPLCSDI'             '0133',
    ' ' 'BDC_OKCODE'           '/00'.
  ENDIF.

ENDFORM. " CS01_TRANSACTION
*&---------------------------------------------------------------------*
*&      Form  CS01_TRANSACTION_02
*&---------------------------------------------------------------------*
FORM cs02_transaction.

  PERFORM bdc_dynpro_processing USING:
  'X' 'SAPLCSDI'             '0140',
  ' ' 'BDC_CURSOR'           'RC29P-POSNR(01)',
  ' ' 'BDC_OKCODE'           '=FCNP'.

  PERFORM bdc_dynpro_processing USING:
  'X' 'SAPLCSDI'             '0140',
  ' ' 'BDC_OKCODE'           '=/CS',
  ' ' 'RC29P-IDNRK(02)'      gs_excel-idnrk,
  ' ' 'RC29P-MENGE(02)'      gs_excel-menge,
  ' ' 'RC29P-POSTP(02)'      gs_excel-postp,

  'X' 'SAPLCSDI'             '0130',
  ' ' 'BDC_OKCODE'           '/00' ,
  ' ' 'RC29P-IDNRK'          gs_excel-idnrk,
*  ' ' 'RC29P-ALPGR'          GS_EXCEL-ALPGR,
  ' ' 'RC29P-MENGE'          gs_excel-menge,
  ' ' 'RC29P-MEINS'          gs_excel-meins.
*  ' ' 'RC29P-RFPNT'          GS_EXCEL-RFPNT,
*  ' ' 'RC29P-AUSCH'          GS_EXCEL-AUSCH,
*  ' ' 'RC29P-ITSOB'          GS_EXCEL-ITSOB.

  PERFORM bdc_dynpro_processing USING:
  'X' 'SAPLCSDI'             '0131',
  ' ' 'BDC_OKCODE'           '/00',
  ' ' 'RC29P-POTX1'          gs_excel-potx1,
  ' ' 'RC29P-POTX2'          gs_excel-potx2,

  ' ' 'RC29P-SANKA'          gs_excel-sanka,
  ' ' 'RC29P-BEIKZ'          gs_excel-beikz.

  IF gs_excel-itsob = '50' OR gs_excel-postp = 'N'.
    PERFORM bdc_dynpro_processing USING:
    'X' 'SAPLCSDI'             '0133',
    ' ' 'BDC_OKCODE'           '/00'.
  ENDIF.

ENDFORM. " CS01_TRANSACTION_02
*&---------------------------------------------------------------------*
*&      Form  TRANSACTION_RESULT
*&---------------------------------------------------------------------*
FORM transaction_result .

* 처리 결과 확인
  g_count = lines( gt_msg ).
  READ TABLE gt_msg INDEX g_count.

  PERFORM message_text_build USING gt_msg-msgid gt_msg-msgnr
                                   gt_msg-msgv1 gt_msg-msgv2
                                   gt_msg-msgv3 gt_msg-msgv4
                          CHANGING gv_message.

  PERFORM get_message USING gt_emsg-file.

*  IF GT_MSG-MSGID = 'M7' AND GT_MSG-MSGNR = '060'.
  IF gt_msg-msgid = '29' AND gt_msg-msgnr = '030'.
    gs_result-icon = c_green.
    gs_result-text = ' '.
    ADD 1 TO g_scnt.
  ELSE.
    gs_result-icon = c_red.
    gs_result-text = gt_emsg-file.
    ADD 1 TO g_ecnt.

  ENDIF.
  g_tcnt = g_tcnt + 1.


*  MOVE-CORRESPONDING gs_excel TO gs_result.
  gs_result-matnr = g_matnr.
  gs_result-stlal = g_stlal.
  gs_result-temp1 = g_maktx.
  gs_result-werks = g_werks.
  APPEND : gs_result TO gt_result.

ENDFORM. " CS01_TRANSACTION_03
*&---------------------------------------------------------------------*
*&      Form  MESSAGE_TEXT_BUILD
*&---------------------------------------------------------------------*
FORM message_text_build USING p_msgid
                                  p_msgnr
                                  p_msgv1
                                  p_msgv2
                                  p_msgv3
                                  p_msgv4
                         CHANGING p_text.

  CALL FUNCTION 'MESSAGE_TEXT_BUILD'
    EXPORTING
      msgid               = p_msgid
      msgnr               = p_msgnr
      msgv1               = p_msgv1
      msgv2               = p_msgv2
      msgv3               = p_msgv3
      msgv4               = p_msgv4
    IMPORTING
      message_text_output = p_text.

ENDFORM. " MESSAGE_TEXT_BUILD
*&---------------------------------------------------------------------*
*&      Form  GET_MESSAGE
*&---------------------------------------------------------------------*
FORM get_message USING p_message.

  CALL FUNCTION 'BAL_DSP_TXT_MSG_READ'
    EXPORTING
      i_langu        = '3'
      i_msgid        = sy-msgid
      i_msgno        = sy-msgno
      i_msgv1        = sy-msgv1
      i_msgv2        = sy-msgv2
      i_msgv3        = sy-msgv3
      i_msgv4        = sy-msgv4
    IMPORTING
      e_message_text = p_message.


ENDFORM. " GET_MESSAGE

*---------------------------------------------------------------------*
*      Form  TOP_OF_PAGE
*---------------------------------------------------------------------*
FORM top_of_page.

  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
*     i_logo             = 'LGCNSLOGO'
      it_list_commentary = gt_list_top_of_page.

ENDFORM. "top_of_page
*&---------------------------------------------------------------------*
*&      Form  EXCEL_LAYOUT
*&---------------------------------------------------------------------*
FORM excel_download .

  DATA : wwwdata_item LIKE wwwdatatab,
         rc           TYPE i.

  gv_file = 'C:\자재마스터생성양식.xls'.
  PERFORM get_file USING 'S' gv_file.

  IF sy-subrc <> 0 OR gv_file IS INITIAL.
    "MESSAGE S001 WITH 'Cancel Template Download File!'.
    MESSAGE s001 WITH TEXT-m01.
    EXIT.
  ENDIF.


ENDFORM. " EXCEL_LAYOUT
*&---------------------------------------------------------------------*
*&      Form  INPUT_CHECK_1
*&---------------------------------------------------------------------*
FORM input_check_1 .

  IF pa_fpath IS INITIAL.
    MESSAGE s000 DISPLAY LIKE 'E' WITH '파일경로는 필수 입력 필드입니다.'.
    LEAVE LIST-PROCESSING.
  ENDIF.

ENDFORM. " INPUT_CHECK_1
*&---------------------------------------------------------------------*
*&      Form  GET_FILE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_1360   text
*      -->P_GV_FILE  text
*----------------------------------------------------------------------*
FORM get_file  USING   p_mode
                        px_fname.

  CALL FUNCTION 'WS_FILENAME_GET'
    EXPORTING
      def_filename     = px_fname
      def_path         = 'C:\ '
      mask             = ',*.*,*.*. '
      mode             = p_mode
    IMPORTING
      filename         = px_fname
    EXCEPTIONS
      inv_winsys       = 1
      no_batch         = 2
      selection_cancel = 3
      selection_error  = 4
      OTHERS           = 5.
ENDFORM.

----------------------------------------------------------------------------------
Extracted by Direct Download Enterprise version 1.3.1 - E.G.Mellodew. 1998-2005 UK. Sap Release 750
